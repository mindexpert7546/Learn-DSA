
//https://practice.geeksforgeeks.org/problems/-rearrange-array-alternately-1587115620/1?page=1&difficulty[]=1&category[]=Arrays&sortBy=submissions
//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
	public static void main (String[] args)throws IOException
	{

// 		Scanner in = new Scanner(System.in);
        
// 		int t = in.nextInt();
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        
         //testcases
        int t = Integer.parseInt(read.readLine());
		
		while(t-- >0)
		{
		    //size of array
		    int n = Integer.parseInt(read.readLine());
		    long[] arr= new long[n];
		    
		    String str[] = read.readLine().trim().split(" ");
		    
		    //adding elements to the array
		    for(int i=0;i<n;i++)
		        arr[i] = Long.parseLong(str[i]);
		    
		    // StringBuffer sb = new StringBuffer();
		    
		    Solution ob = new Solution();
		    
		    //calling rearrange() function
		    ob.rearrange(arr, n);
		    StringBuffer sb = new StringBuffer();
		    
		    //appending and printing the elements
		    for(int i =0; i < n; i++)
		     sb.append(arr[i] + " ");
		    System.out.println(sb);
		}
	}
}




// } Driver Code Ends


class Solution{
    
    // temp: input array
    // n: size of array
    //Function to rearrange  the array elements alternately.
    public static void rearrange(long arr[], int n){
        
        // Your code here
    //     long temp[]  = new long[n];
        
    //   int l=0;
    //   int r = n-1;
    //   int i=0;
    //   if(n==1){
    //       temp[0]=arr[0];
    //       return;
    //   }
       
    //   while(r>=l && i<n){
    //       if(i%2==0){
    //           temp[i]=arr[r];
    //           i++;
    //       }
           
    //       if(i%2!=0){
    //           temp[i]=arr[l];
    //           i++;
    //       }
    //       l++;
    //       r--;
    //   }
       
    //   for(int j=0; j<n; j++){
    //       arr[j]=temp[j];
    //   }
    if(n==1){
        return;
    }
    long me = arr[n-1]+1;
    int mini=0;
    int maxi=n-1;
    int i=0;
    
    while(maxi>=mini){
        if(i%2==0){
            arr[i]=arr[i]+arr[maxi]%me*me;
            i++;
            maxi--;
        }
        else{
            arr[i]=arr[i]+arr[mini]%me*me;
            i++;
            mini++;
        }
    }
    
    for(int j=0; j<n; j++){
        arr[j]=arr[j]/me;
    }
            
    }
    
}


